import React, { useState, useEffect } from 'react';
import { Nav, InputGroup, Form, Button, Badge, Spinner } from 'react-bootstrap';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { 
  faSearch, 
  faPlus, 
  faUserFriends, 
  faUsers, 
  faComments, 
  faCircle,
  faExclamationTriangle
} from '@fortawesome/free-solid-svg-icons';
import { useMessages } from '../../contexts/MessageContext';
import { useAuth } from '../../contexts/AuthContext';
import './Sidebar.css';

const Sidebar = () => {
  const { chats, loadChats, setActiveChat, activeChat, loading: chatsLoading } = useMessages();
  const { user } = useAuth();
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredChats, setFilteredChats] = useState([]);
  const [chatType, setChatType] = useState('all'); // all, private, group
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
  useEffect(() => {
    if (!Array.isArray(chats) || chats.length === 0) {
      loadChats();
    }
  }, [chats, loadChats]);
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ —Ç–∏–ø–∞ —á–∞—Ç–∞
  useEffect(() => {
    if (!Array.isArray(chats) || chats.length === 0) {
      setFilteredChats([]);
      return;
    }
    
    let filtered = Array.isArray(chats) ? [...chats] : [];
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É —á–∞—Ç–∞
    if (chatType !== 'all') {
      filtered = filtered.filter(chat => chat.type === chatType);
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    if (searchTerm.trim()) {
      const term = searchTerm.toLowerCase();
      filtered = filtered.filter(chat => {
        // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —á–∞—Ç–∞ –∏–ª–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return chat.name?.toLowerCase().includes(term) || 
               chat.users?.some(user => user.username.toLowerCase().includes(term));
      });
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    filtered.sort((a, b) => {
      if (!a.last_message && !b.last_message) return 0;
      if (!a.last_message) return 1;
      if (!b.last_message) return -1;
      
      return new Date(b.last_message.created_at) - new Date(a.last_message.created_at);
    });
    
    setFilteredChats(filtered);
  }, [chats, searchTerm, chatType]);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞
  const handleSelectChat = (chat) => {
    setActiveChat(chat);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
  const handleNewChat = () => {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞');
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
  };
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Ç–∞
  const getChatDisplayData = (chat) => {
    if (!chat) return { name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π', avatar: null, isOnline: false };
    
    if (chat.type === 'private') {
      // –î–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
      const otherUser = chat.users?.find(u => u.id !== user?.id) || {};
      return {
        name: otherUser.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        avatar: otherUser.avatar || null,
        isOnline: otherUser.status === 'online'
      };
    } else {
      // –î–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
      return {
        name: chat.name || '–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç',
        avatar: chat.avatar,
        isOnline: false
      };
    }
  };
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  const getLastMessagePreview = (chat) => {
    if (!chat.last_message) return '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π';
    
    // –î–ª—è —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (chat.last_message.file) {
      return `üìé ${chat.last_message.file.name || '–§–∞–π–ª'}`;
    }
    
    // –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const content = chat.last_message.content || '';
    return content.length > 30 ? `${content.substring(0, 30)}...` : content;
  };
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  const getFormattedTime = (timestamp) => {
    if (!timestamp) return '';
    
    const date = new Date(timestamp);
    const now = new Date();
    const isToday = date.toDateString() === now.toDateString();
    
    if (isToday) {
      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    } else {
      return date.toLocaleDateString([], { day: '2-digit', month: '2-digit' });
    }
  };
  
  // –ï—Å–ª–∏ —á–∞—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  if (chatsLoading) {
    return (
      <div className="sidebar">
        <div className="sidebar-header">
          <h5 className="sidebar-title">–ß–∞—Ç—ã</h5>
        </div>
        <div className="sidebar-loading">
          <Spinner animation="border" variant="primary" />
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤...</p>
        </div>
      </div>
    );
  }
  
  return (
    <div className="sidebar">
      <div className="sidebar-header">
        <h5 className="sidebar-title">–ß–∞—Ç—ã</h5>
        <Button 
          variant="primary" 
          size="sm" 
          title="–ù–æ–≤—ã–π —á–∞—Ç"
          onClick={handleNewChat}
          className="new-chat-btn"
        >
          <FontAwesomeIcon icon={faPlus} />
        </Button>
      </div>
      
      {/* –ü–æ–∏—Å–∫ —á–∞—Ç–æ–≤ */}
      <div className="sidebar-search">
        <InputGroup>
          <InputGroup.Text>
            <FontAwesomeIcon icon={faSearch} />
          </InputGroup.Text>
          <Form.Control
            type="text"
            placeholder="–ü–æ–∏—Å–∫ —á–∞—Ç–æ–≤..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </InputGroup>
      </div>
      
      {/* –§–∏–ª—å—Ç—Ä—ã —Ç–∏–ø–æ–≤ —á–∞—Ç–æ–≤ */}
      <div className="chat-type-filter">
        <Nav variant="pills" className="chat-type-nav">
          <Nav.Item>
            <Nav.Link 
              active={chatType === 'all'} 
              onClick={() => setChatType('all')}
              className="chat-type-link"
            >
              <FontAwesomeIcon icon={faComments} className="me-1" />
              –í—Å–µ
            </Nav.Link>
          </Nav.Item>
          <Nav.Item>
            <Nav.Link 
              active={chatType === 'private'} 
              onClick={() => setChatType('private')}
              className="chat-type-link"
            >
              <FontAwesomeIcon icon={faUserFriends} className="me-1" />
              –õ–∏—á–Ω—ã–µ
            </Nav.Link>
          </Nav.Item>
          <Nav.Item>
            <Nav.Link 
              active={chatType === 'group'} 
              onClick={() => setChatType('group')}
              className="chat-type-link"
            >
              <FontAwesomeIcon icon={faUsers} className="me-1" />
              –ì—Ä—É–ø–ø—ã
            </Nav.Link>
          </Nav.Item>
        </Nav>
      </div>
      
      {/* –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ */}
      <div className="chats-list">
        {filteredChats.length === 0 ? (
          <div className="no-chats-message">
            <FontAwesomeIcon icon={faExclamationTriangle} className="no-chats-icon" />
            <p>{searchTerm ? '–ß–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤'}</p>
            {!searchTerm && (
              <Button 
                variant="outline-primary" 
                size="sm"
                onClick={handleNewChat}
                className="mt-2"
              >
                <FontAwesomeIcon icon={faPlus} className="me-1" />
                –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç
              </Button>
            )}
          </div>
        ) : (
          filteredChats.map(chat => {
            const displayData = getChatDisplayData(chat);
            const isActive = activeChat?.id === chat.id;
            
            return (
              <div 
                key={chat.id} 
                className={`chat-item ${isActive ? 'active' : ''}`}
                onClick={() => handleSelectChat(chat)}
              >
                <div className="chat-avatar">
                  {displayData.avatar ? (
                    <img src={displayData.avatar} alt="Avatar" className="avatar-img" />
                  ) : (
                    <div className="avatar-placeholder">
                      {displayData.name.charAt(0).toUpperCase()}
                    </div>
                  )}
                  {displayData.isOnline && (
                    <span className="online-indicator">
                      <FontAwesomeIcon icon={faCircle} />
                    </span>
                  )}
                </div>
                
                <div className="chat-details">
                  <div className="chat-top-row">
                    <div className="chat-name">{displayData.name}</div>
                    <div className="chat-time">
                      {chat.last_message?.created_at && 
                        getFormattedTime(chat.last_message.created_at)
                      }
                    </div>
                  </div>
                  
                  <div className="chat-bottom-row">
                    <div className="chat-last-message">
                      {getLastMessagePreview(chat)}
                    </div>
                    
                    {chat.unread_count > 0 && (
                      <Badge bg="primary" pill className="unread-badge">
                        {chat.unread_count}
                      </Badge>
                    )}
                  </div>
                </div>
              </div>
            );
          })
        )}
      </div>
    </div>
  );
};

export default Sidebar; 