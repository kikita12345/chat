services:
  # Сервер мессенджера
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: messenger-server
    network_mode: host
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      # Возвращаем localhost
      - DATABASE_URL=postgres://${DB_USER:-postgres}:${DB_PASSWORD:-postgres12345!}@localhost:5432/${DB_NAME:-messenger}?sslmode=disable
      - JWT_SECRET=${JWT_SECRET:-gp2Ju8PPFTvLA4WRbDDNF5jUQ2sX7KcPBh67VwnM34LkR9ZsSxDqE5tU8X2aYcFG}
      - DB_HOST=localhost
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres12345!}
      - DB_NAME=${DB_NAME:-messenger}
      - REDIS_HOST=localhost
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - DEBUG=${DEBUG:-true}
      - SERVER_PORT=9095
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY:-devkey}
      - LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET:-devsecret123}
      - LIVEKIT_URL=ws://localhost:7880
      - SSE_KEY_BASE64=bTEvUHlYQ0VlbWVaZUJENUh2aUpKWGQ2V2JTQzl5d20=
      - SERVER_ENCRYPTION_KEY=bTEvUHlYQ0VlbWVaZUJENUh2aUpKWGQ2V2JTQzl5d20=
      - REDIS_ENABLED=true
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      - LOG_JSON=${LOG_JSON:-false}
      - APP_ENV=development
      - SERVER_HOST=0.0.0.0
      - WEBSOCKET_PORT=9091
      - CONFIG_PATH=/app/config/config.json
      - ADMIN_USERNAME=kikita
      - ADMIN_PASSWORD=1q2w3e4R!
      - CORS_ENABLED=true
      - CORS_ALLOWED_ORIGINS=https://chat.kikita.ru
    restart: unless-stopped
    volumes:
      - ./uploads:/app/uploads
      - ./logs/server:/app/logs
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      # Проверяем localhost, так как network_mode: host
      test: ["CMD", "wget", "-qO-", "http://localhost:9095/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # Клиентское приложение
  client:
    build:
      context: .
      dockerfile: docker/client/Dockerfile
    container_name: messenger-client
    network_mode: host
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=https://chat.kikita.ru/api
      - REACT_APP_WS_URL=wss://chat.kikita.ru/api/ws
      - PORT=8081
    restart: unless-stopped
    volumes:
      - ./websocket-test.html:/usr/share/nginx/html/websocket-test.html:ro
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      # Возвращаем healthcheck для Nginx на порт 8081
      test: ["CMD", "wget", "-qO-", "http://localhost:8081/nginx-status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # База данных PostgreSQL
  db:
    image: postgres:16-alpine
    container_name: messenger-db
    network_mode: host
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres12345!}
      POSTGRES_DB: ${DB_NAME:-messenger}
    volumes:
      - pg_data:/var/lib/postgresql/data
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-messenger}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis для WebSocket масштабирования
  redis:
    image: redis:7-alpine
    container_name: messenger-redis
    network_mode: host
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

volumes:
  pg_data:
  redis_data:
